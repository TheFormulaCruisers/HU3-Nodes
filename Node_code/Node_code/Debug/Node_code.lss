
Node_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f77  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c98  00000000  00000000  0000139b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000697  00000000  00000000  00002033  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  000026cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061d  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000439  00000000  00000000  00002e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003256  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_22>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_25>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 13 01 	call	0x226	; 0x226 <main>
  8c:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <ADC_reading>:


int ADC_reading(unsigned int *ADC2, unsigned int *ADC_data1 , unsigned int *ADC_data2)
{	
	
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2); 		// Set ADC prescalar to 256 - 125KHz sample rate @ 16MHz
  94:	ea e7       	ldi	r30, 0x7A	; 122
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	20 81       	ld	r18, Z
  9a:	27 60       	ori	r18, 0x07	; 7
  9c:	20 83       	st	Z, r18

	ADMUX |= (1 << REFS0); 										// Set ADC reference to AVCC
  9e:	ac e7       	ldi	r26, 0x7C	; 124
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	2c 91       	ld	r18, X
  a4:	20 64       	ori	r18, 0x40	; 64
  a6:	2c 93       	st	X, r18
	ADMUX |= (1 << ADLAR); 										// Left adjust ADC result to allow easy 8 bit reading
  a8:	2c 91       	ld	r18, X
  aa:	20 62       	ori	r18, 0x20	; 32
  ac:	2c 93       	st	X, r18


	ADMUX |= (1<<MUX1) | (1<<MUX2);								//  ADC6 , MUX values needed to be changed to use ADC7
  ae:	2c 91       	ld	r18, X
  b0:	26 60       	ori	r18, 0x06	; 6
  b2:	2c 93       	st	X, r18
	ADCSRA |= (1 << ADEN);  									// Enable ADC
  b4:	20 81       	ld	r18, Z
  b6:	20 68       	ori	r18, 0x80	; 128
  b8:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC);  									// Start A2D Conversions
  ba:	20 81       	ld	r18, Z
  bc:	20 64       	ori	r18, 0x40	; 64
  be:	20 83       	st	Z, r18
	*ADC_data1 = ADCH;
  c0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  c4:	e2 2f       	mov	r30, r18
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	db 01       	movw	r26, r22
  ca:	ed 93       	st	X+, r30
  cc:	fc 93       	st	X, r31
	
	if(ADC2 == 1)
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	a1 f4       	brne	.+40     	; 0xfa <ADC_reading+0x66>
	{
		ADMUX |= (1<<MUX0) | (1<<MUX1) | (1<<MUX2);				// ADC7 , MUX values needed to be changed to use ADC6
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	87 60       	ori	r24, 0x07	; 7
  da:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);  								// Enable ADC
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);			
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
		*ADC_data2 = ADCH;										// Start A2D Conversions
  ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	fa 01       	movw	r30, r20
  f4:	91 83       	std	Z+1, r25	; 0x01
  f6:	80 83       	st	Z, r24
		return *ADC_data1, *ADC_data2;							// Return both data
  f8:	08 95       	ret
	}
	else
		return *ADC_data1;										// Return the data
  fa:	82 2f       	mov	r24, r18
  fc:	90 e0       	ldi	r25, 0x00	; 0
}
  fe:	08 95       	ret

00000100 <Wait>:


void Wait()														// delay for 200 ms between every analog reading
{
 100:	84 e1       	ldi	r24, 0x14	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	e9 ef       	ldi	r30, 0xF9	; 249
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <Wait+0x6>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <Wait+0xc>
 10c:	00 00       	nop
 10e:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;
	for(i=0;i<20;i++)
 110:	c1 f7       	brne	.-16     	; 0x102 <Wait+0x2>
	_delay_ms(1);
}
 112:	08 95       	ret

00000114 <can_init>:
			CANSTMOB &= ~_BV(RXOK);
			CANCDMOB = _BV(CONMOB1);
			break;
		}
	}
}
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 126:	22 e0       	ldi	r18, 0x02	; 2
 128:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 12c:	24 e0       	ldi	r18, 0x04	; 4
 12e:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
 132:	23 e1       	ldi	r18, 0x13	; 19
 134:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 138:	20 e8       	ldi	r18, 0x80	; 128
 13a:	20 93 db 00 	sts	0x00DB, r18	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
 13e:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 142:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 146:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
 14a:	4f ef       	ldi	r20, 0xFF	; 255
 14c:	5f ef       	ldi	r21, 0xFF	; 255
 14e:	ba 01       	movw	r22, r20
 150:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__DATA_REGION_ORIGIN__+0x94>
 154:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <__DATA_REGION_ORIGIN__+0x95>
 158:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
 15c:	70 93 f7 00 	sts	0x00F7, r23	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
 160:	28 2f       	mov	r18, r24
 162:	22 95       	swap	r18
 164:	22 0f       	add	r18, r18
 166:	20 7e       	andi	r18, 0xE0	; 224
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	a0 e0       	ldi	r26, 0x00	; 0
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	b8 2f       	mov	r27, r24
 17c:	aa 27       	eor	r26, r26
 17e:	99 27       	eor	r25, r25
 180:	88 27       	eor	r24, r24
 182:	a2 2b       	or	r26, r18
 184:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 188:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 18c:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 190:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0d ee       	ldi	r16, 0xED	; 237
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	2e ee       	ldi	r18, 0xEE	; 238
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	cf ee       	ldi	r28, 0xEF	; 239
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	a4 ef       	ldi	r26, 0xF4	; 244
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	0f 2e       	mov	r0, r31
 1a8:	f0 ef       	ldi	r31, 0xF0	; 240
 1aa:	ef 2e       	mov	r14, r31
 1ac:	f1 2c       	mov	r15, r1
 1ae:	f0 2d       	mov	r31, r0
 1b0:	98 2f       	mov	r25, r24
 1b2:	92 95       	swap	r25
 1b4:	90 7f       	andi	r25, 0xF0	; 240
 1b6:	f8 01       	movw	r30, r16
 1b8:	90 83       	st	Z, r25
 1ba:	f9 01       	movw	r30, r18
 1bc:	10 82       	st	Z, r1
 1be:	18 82       	st	Y, r1
 1c0:	4d 93       	st	X+, r20
 1c2:	5d 93       	st	X+, r21
 1c4:	6d 93       	st	X+, r22
 1c6:	7c 93       	st	X, r23
 1c8:	13 97       	sbiw	r26, 0x03	; 3
 1ca:	f7 01       	movw	r30, r14
 1cc:	10 82       	st	Z, r1
 1ce:	11 82       	std	Z+1, r1	; 0x01
 1d0:	12 82       	std	Z+2, r1	; 0x02
 1d2:	13 82       	std	Z+3, r1	; 0x03
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	8e 30       	cpi	r24, 0x0E	; 14
 1d8:	59 f7       	brne	.-42     	; 0x1b0 <can_init+0x9c>
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	08 95       	ret

000001ee <can_transmit>:

void can_transmit(uint8_t *dat, uint8_t len) {

	// Select MOb0
	CANPAGE = 0x00;
 1ee:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 1f2:	66 23       	and	r22, r22
 1f4:	79 f0       	breq	.+30     	; 0x214 <can_transmit+0x26>
 1f6:	fc 01       	movw	r30, r24
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	26 0f       	add	r18, r22
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	2f 5f       	subi	r18, 0xFF	; 255
 200:	3f 4f       	sbci	r19, 0xFF	; 255
 202:	28 0f       	add	r18, r24
 204:	39 1f       	adc	r19, r25
		CANMSG = *(dat+dat_i);
 206:	aa ef       	ldi	r26, 0xFA	; 250
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	91 91       	ld	r25, Z+
 20c:	9c 93       	st	X, r25
	// Select MOb0
	CANPAGE = 0x00;

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 20e:	e2 17       	cp	r30, r18
 210:	f3 07       	cpc	r31, r19
 212:	d9 f7       	brne	.-10     	; 0x20a <can_transmit+0x1c>
		CANMSG = *(dat+dat_i);
	}

	// Set message length and start transmission
	CANCDMOB = (CANCDMOB & _BV(IDE)) | _BV(CONMOB0) | (len & 0x0F);
 214:	ef ee       	ldi	r30, 0xEF	; 239
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 71       	andi	r24, 0x10	; 16
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	6f 70       	andi	r22, 0x0F	; 15
 220:	68 2b       	or	r22, r24
 222:	60 83       	st	Z, r22
 224:	08 95       	ret

00000226 <main>:
#define ADC_ACTIVE2												// Maximum amount of defined functions is 2
//#define Input_Capture									


int main(void)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	28 97       	sbiw	r28, 0x08	; 8
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
	can_init(0);							// Initialize CAN protocol	
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 8a 00 	call	0x114	; 0x114 <can_init>
	unsigned int Period;
	unsigned int ADC_2;
	unsigned int ADC_data1;
	unsigned int ADC_data2;
	
	ADC_2 = 0;
 242:	1a 82       	std	Y+2, r1	; 0x02
 244:	19 82       	std	Y+1, r1	; 0x01
	
	DDRB = 0b00000100 ;														// Define register pins input and output
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00110000 ;
 24a:	80 e3       	ldi	r24, 0x30	; 48
 24c:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10000000 ;
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	8a b9       	out	0x0a, r24	; 10
	
	uint8_t dat[2] = {0xAA};												// Define
 252:	18 86       	std	Y+8, r1	; 0x08
 254:	1f 82       	std	Y+7, r1	; 0x07
 256:	8a ea       	ldi	r24, 0xAA	; 170
 258:	8f 83       	std	Y+7, r24	; 0x07
	
	PCMSK0 |= (1<<PCINT0) | (1<<PCINT3);									// Enable interrupt pins for addition to the code
 25a:	ea e6       	ldi	r30, 0x6A	; 106
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	89 60       	ori	r24, 0x09	; 9
 262:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);
 264:	e8 e6       	ldi	r30, 0x68	; 104
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	80 83       	st	Z, r24
	sei();
 26e:	78 94       	sei
    while (1) 
    {
////////////////////////////////////////////////////////////////////////////////
		#ifdef ADC_ACTIVE1													// check if ADC1(PB5) is active			
			#ifdef ADC_ACTIVE2												// check if ADC6(PB6) is active						
				ADC_2 = 1;													// Variable bit to identify if both ADC's are active 1 = both active, 0 = just ADC_ACTIVE1
 270:	01 e0       	ldi	r16, 0x01	; 1
 272:	10 e0       	ldi	r17, 0x00	; 0
 274:	1a 83       	std	Y+2, r17	; 0x02
 276:	09 83       	std	Y+1, r16	; 0x01
				ADC_reading(&ADC_2 , &ADC_data1 , &ADC_data2);				// call ADC_reading function
 278:	ae 01       	movw	r20, r28
 27a:	4b 5f       	subi	r20, 0xFB	; 251
 27c:	5f 4f       	sbci	r21, 0xFF	; 255
 27e:	be 01       	movw	r22, r28
 280:	6d 5f       	subi	r22, 0xFD	; 253
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	ce 01       	movw	r24, r28
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	0e 94 4a 00 	call	0x94	; 0x94 <ADC_reading>
				dat[0] = ADC_data1;											// data byte 0 consist data from ADC_data1
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	8f 83       	std	Y+7, r24	; 0x07
				dat[1] = ADC_data2;											// data byte 1 consist data from ADC_data2
 290:	8d 81       	ldd	r24, Y+5	; 0x05
 292:	88 87       	std	Y+8, r24	; 0x08
			else
				dat[0] = Period;
			#endif	
		#endif 
////////////////////////////////////////////////////////////////////////////////
		Wait();
 294:	0e 94 80 00 	call	0x100	; 0x100 <Wait>
		can_transmit(dat, 1);	
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	ce 01       	movw	r24, r28
 29c:	07 96       	adiw	r24, 0x07	; 7
 29e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <can_transmit>
 2a2:	e8 cf       	rjmp	.-48     	; 0x274 <main+0x4e>

000002a4 <__vector_22>:
    }
	return 0;
}

ISR(PCINT0_vect)
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1

}
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <__vector_25>:

ISR(PCINT3_vect)
{
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
	// Your code here
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
