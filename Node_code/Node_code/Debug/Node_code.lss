
Node_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000038e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eeb  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1a  00000000  00000000  0000137b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062a  00000000  00000000  00001f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  000025c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ec  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fb  00000000  00000000  00002cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000030ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_17>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_22>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_25>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 11 01 	call	0x222	; 0x222 <main>
  9c:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <ADC_reading>:


int ADC_reading(unsigned int *ADC2, unsigned int *ADC_data1 , unsigned int *ADC_data2)
{	
	
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2); 		// Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
  a4:	ea e7       	ldi	r30, 0x7A	; 122
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	20 81       	ld	r18, Z
  aa:	27 60       	ori	r18, 0x07	; 7
  ac:	20 83       	st	Z, r18

	ADMUX |= (1 << REFS0); 										// Set ADC reference to AVCC
  ae:	ac e7       	ldi	r26, 0x7C	; 124
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	2c 91       	ld	r18, X
  b4:	20 64       	ori	r18, 0x40	; 64
  b6:	2c 93       	st	X, r18
	ADMUX |= (1 << ADLAR); 										// Left adjust ADC result to allow easy 8 bit reading
  b8:	2c 91       	ld	r18, X
  ba:	20 62       	ori	r18, 0x20	; 32
  bc:	2c 93       	st	X, r18


	ADMUX |= (1<<MUX1) | (1<<MUX2);								// ADC6 , MUX values needed to be changed to use ADC7
  be:	2c 91       	ld	r18, X
  c0:	26 60       	ori	r18, 0x06	; 6
  c2:	2c 93       	st	X, r18
	ADCSRA |= (1 << ADEN);  									// Enable ADC
  c4:	20 81       	ld	r18, Z
  c6:	20 68       	ori	r18, 0x80	; 128
  c8:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC);  									// Start A2D Conversions
  ca:	20 81       	ld	r18, Z
  cc:	20 64       	ori	r18, 0x40	; 64
  ce:	20 83       	st	Z, r18
	*ADC_data1 = ADCH;
  d0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  d4:	e2 2f       	mov	r30, r18
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	db 01       	movw	r26, r22
  da:	ed 93       	st	X+, r30
  dc:	fc 93       	st	X, r31
	
	if(ADC2 == 1)
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	a1 f4       	brne	.+40     	; 0x10a <ADC_reading+0x66>
	{
		ADMUX |= (1<<MUX0) | (1<<MUX1) | (1<<MUX2);				// ADC7 , MUX values needed to be changed to use ADC6
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	87 60       	ori	r24, 0x07	; 7
  ea:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);  								// Enable ADC
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);			
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	80 83       	st	Z, r24
		*ADC_data2 = ADCH;										// Start A2D Conversions
  fc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fa 01       	movw	r30, r20
 104:	91 83       	std	Z+1, r25	; 0x01
 106:	80 83       	st	Z, r24
		return *ADC_data1, *ADC_data2;							// Return both data
 108:	08 95       	ret
	}
	else
		return *ADC_data1;										// Return the data
 10a:	82 2f       	mov	r24, r18
 10c:	90 e0       	ldi	r25, 0x00	; 0
}
 10e:	08 95       	ret

00000110 <can_init>:
			CANSTMOB &= ~_BV(RXOK);
			CANCDMOB = _BV(CONMOB1);
			break;
		}
	}
}
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 122:	22 e0       	ldi	r18, 0x02	; 2
 124:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 128:	24 e0       	ldi	r18, 0x04	; 4
 12a:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
 12e:	23 e1       	ldi	r18, 0x13	; 19
 130:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 134:	20 e8       	ldi	r18, 0x80	; 128
 136:	20 93 db 00 	sts	0x00DB, r18	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
 13a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 13e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 142:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
 146:	4f ef       	ldi	r20, 0xFF	; 255
 148:	5f ef       	ldi	r21, 0xFF	; 255
 14a:	ba 01       	movw	r22, r20
 14c:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__DATA_REGION_ORIGIN__+0x94>
 150:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <__DATA_REGION_ORIGIN__+0x95>
 154:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
 158:	70 93 f7 00 	sts	0x00F7, r23	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
 15c:	28 2f       	mov	r18, r24
 15e:	22 95       	swap	r18
 160:	22 0f       	add	r18, r18
 162:	20 7e       	andi	r18, 0xE0	; 224
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	a0 e0       	ldi	r26, 0x00	; 0
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	b8 2f       	mov	r27, r24
 178:	aa 27       	eor	r26, r26
 17a:	99 27       	eor	r25, r25
 17c:	88 27       	eor	r24, r24
 17e:	a2 2b       	or	r26, r18
 180:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 184:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 188:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 18c:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0d ee       	ldi	r16, 0xED	; 237
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	2e ee       	ldi	r18, 0xEE	; 238
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	cf ee       	ldi	r28, 0xEF	; 239
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	a4 ef       	ldi	r26, 0xF4	; 244
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	0f 2e       	mov	r0, r31
 1a4:	f0 ef       	ldi	r31, 0xF0	; 240
 1a6:	ef 2e       	mov	r14, r31
 1a8:	f1 2c       	mov	r15, r1
 1aa:	f0 2d       	mov	r31, r0
 1ac:	98 2f       	mov	r25, r24
 1ae:	92 95       	swap	r25
 1b0:	90 7f       	andi	r25, 0xF0	; 240
 1b2:	f8 01       	movw	r30, r16
 1b4:	90 83       	st	Z, r25
 1b6:	f9 01       	movw	r30, r18
 1b8:	10 82       	st	Z, r1
 1ba:	18 82       	st	Y, r1
 1bc:	4d 93       	st	X+, r20
 1be:	5d 93       	st	X+, r21
 1c0:	6d 93       	st	X+, r22
 1c2:	7c 93       	st	X, r23
 1c4:	13 97       	sbiw	r26, 0x03	; 3
 1c6:	f7 01       	movw	r30, r14
 1c8:	10 82       	st	Z, r1
 1ca:	11 82       	std	Z+1, r1	; 0x01
 1cc:	12 82       	std	Z+2, r1	; 0x02
 1ce:	13 82       	std	Z+3, r1	; 0x03
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	8e 30       	cpi	r24, 0x0E	; 14
 1d4:	59 f7       	brne	.-42     	; 0x1ac <can_init+0x9c>
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	08 95       	ret

000001ea <can_transmit>:

void can_transmit(uint8_t *dat, uint8_t len) {

	// Select MOb0
	CANPAGE = 0x00;
 1ea:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 1ee:	66 23       	and	r22, r22
 1f0:	79 f0       	breq	.+30     	; 0x210 <can_transmit+0x26>
 1f2:	fc 01       	movw	r30, r24
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	26 0f       	add	r18, r22
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	2f 5f       	subi	r18, 0xFF	; 255
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	28 0f       	add	r18, r24
 200:	39 1f       	adc	r19, r25
		CANMSG = *(dat+dat_i);
 202:	aa ef       	ldi	r26, 0xFA	; 250
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	91 91       	ld	r25, Z+
 208:	9c 93       	st	X, r25
	// Select MOb0
	CANPAGE = 0x00;

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 20a:	e2 17       	cp	r30, r18
 20c:	f3 07       	cpc	r31, r19
 20e:	d9 f7       	brne	.-10     	; 0x206 <can_transmit+0x1c>
		CANMSG = *(dat+dat_i);
	}

	// Set message length and start transmission
	CANCDMOB = (CANCDMOB & _BV(IDE)) | _BV(CONMOB0) | (len & 0x0F);
 210:	ef ee       	ldi	r30, 0xEF	; 239
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 71       	andi	r24, 0x10	; 16
 218:	80 64       	ori	r24, 0x40	; 64
 21a:	6f 70       	andi	r22, 0x0F	; 15
 21c:	68 2b       	or	r22, r24
 21e:	60 83       	st	Z, r22
 220:	08 95       	ret

00000222 <main>:

volatile unsigned int Overflows = 0;

//___________________________________________________________________________________________________________________________________________________________________________________//
int main(void)
{
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	28 97       	sbiw	r28, 0x08	; 8
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
	can_init(0);															// Initialize CAN protocol	
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 88 00 	call	0x110	; 0x110 <can_init>
	
	unsigned int Period;													// define variables
	unsigned int ADC_data1;
	unsigned int ADC_data2;
	
	unsigned int ADC_2 = 0;
 23e:	1e 82       	std	Y+6, r1	; 0x06
 240:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t dat[2] = {0xAA};												// Define amount of bytes in the data package
 242:	18 86       	std	Y+8, r1	; 0x08
 244:	1f 82       	std	Y+7, r1	; 0x07
 246:	8a ea       	ldi	r24, 0xAA	; 170
 248:	8f 83       	std	Y+7, r24	; 0x07
	
	DDRB = 0b00000100 ;														// Define register pins input and output
 24a:	84 e0       	ldi	r24, 0x04	; 4
 24c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00110000 ;
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10000000 ;
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	8a b9       	out	0x0a, r24	; 10
	

	TCCR0B |= (1<<CS00) | (1<<CS02);										// Set 8-bit Timer TCCR0B prescalar to 1024
 256:	85 b5       	in	r24, 0x25	; 37
 258:	85 60       	ori	r24, 0x05	; 5
 25a:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;																// Initialize timer
 25c:	16 bc       	out	0x26, r1	; 38
		
	
	PCMSK0 |= (1<<PCINT0) | (1<<PCINT3);									// Enable interrupt pins for additions to the code (spare)
 25e:	ea e6       	ldi	r30, 0x6A	; 106
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	89 60       	ori	r24, 0x09	; 9
 266:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);
 268:	e8 e6       	ldi	r30, 0x68	; 104
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	80 83       	st	Z, r24
	sei();
 272:	78 94       	sei
	
    while (1) 
    {
		#ifdef ADC_ACTIVE1													// check if ADC1(PB5) is active			
			#ifdef ADC_ACTIVE2												// check if ADC6(PB6) is active						
				ADC_2 = 1;													// Variable bit to identify if both ADC's are active 1 = both active, 0 = just ADC_ACTIVE1
 274:	01 e0       	ldi	r16, 0x01	; 1
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	1e 83       	std	Y+6, r17	; 0x06
 27a:	0d 83       	std	Y+5, r16	; 0x05
				ADC_reading(&ADC_2 , &ADC_data1 , &ADC_data2);				// call ADC_reading function
 27c:	ae 01       	movw	r20, r28
 27e:	4d 5f       	subi	r20, 0xFD	; 253
 280:	5f 4f       	sbci	r21, 0xFF	; 255
 282:	be 01       	movw	r22, r28
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	ce 01       	movw	r24, r28
 28a:	05 96       	adiw	r24, 0x05	; 5
 28c:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_reading>
				dat[0] = ADC_data1;											// data byte 0 consist data from ADC_data1
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	8f 83       	std	Y+7, r24	; 0x07
				dat[1] = ADC_data2;											// data byte 1 consist data from ADC_data2
 294:	8b 81       	ldd	r24, Y+3	; 0x03
 296:	88 87       	std	Y+8, r24	; 0x08
				dat[0] = Period;
			#endif	
		#endif 

		
		if((TCNT0 >= 57) && (Overflows >= 1))								// Condition to transmit after interval set in wait function
 298:	86 b5       	in	r24, 0x26	; 38
 29a:	89 33       	cpi	r24, 0x39	; 57
 29c:	58 f0       	brcs	.+22     	; 0x2b4 <main+0x92>
 29e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2a6:	89 2b       	or	r24, r25
 2a8:	29 f0       	breq	.+10     	; 0x2b4 <main+0x92>
			can_transmit(dat, 1);											// Call CAN transmit function
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	ce 01       	movw	r24, r28
 2ae:	07 96       	adiw	r24, 0x07	; 7
 2b0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <can_transmit>
			TCNT0 = 0;														// Reset Timer 
 2b4:	16 bc       	out	0x26, r1	; 38
			Overflows = 0;													// the timer overflows before reaching 20 milliseconds so we need to count the overflows as well
 2b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 2ba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
 2be:	dc cf       	rjmp	.-72     	; 0x278 <main+0x56>

000002c0 <__vector_22>:



//___________________________________________________________________________________________________________________________________________________________________________________________//
ISR(PCINT0_vect)															// Interrupt for additions to the code (spare)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1

}
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <__vector_25>:

ISR(PCINT3_vect)															// Interrupt for additions to the code (spare)
{
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
	// Your code here
}
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__vector_17>:

ISR(TIMER0_OVF_vect)															// Interrupt for additions to the code (spare)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
	Overflows ++;// Your code here
 2f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 304:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
