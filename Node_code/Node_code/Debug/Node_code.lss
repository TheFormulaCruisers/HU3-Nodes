
Node_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fb8  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cba  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000745  00000000  00000000  000020a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  000027e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000622  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041e  00000000  00000000  00002f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_22>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_25>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 13 01 	call	0x226	; 0x226 <main>
  8c:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <ADC_reading>:



void ADC_reading()
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 		// Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
  94:	ea e7       	ldi	r30, 0x7A	; 122
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	87 60       	ori	r24, 0x07	; 7
  9c:	80 83       	st	Z, r24

	ADMUX |= (1 << REFS0); 						// Set ADC reference to AVCC
  9e:	ac e7       	ldi	r26, 0x7C	; 124
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	8c 91       	ld	r24, X
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); 						// Left adjust ADC result to allow easy 8 bit reading
  a8:	8c 91       	ld	r24, X
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8c 93       	st	X, r24

	ADMUX |= (1<<MUX2) | (1<<MUX1) ;					//  MUX values needed to be changed to use ADC5
  ae:	8c 91       	ld	r24, X
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	8c 93       	st	X, r24

	//ADCSRA |= (1 << ADFR);  						// Set ADC to Free-Running Mode

	ADCSRA |= (1 << ADEN);  						// Enable ADC
  b4:	80 81       	ld	r24, Z
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  						// Start A2D Conversions
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <Wait>:
	//return ADCH;
}


void Wait()													// delay for 200 ms between every analog reading
{
  c2:	84 e1       	ldi	r24, 0x14	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	e9 ef       	ldi	r30, 0xF9	; 249
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <Wait+0x6>
  cc:	00 c0       	rjmp	.+0      	; 0xce <Wait+0xc>
  ce:	00 00       	nop
  d0:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;
	for(i=0;i<20;i++)
  d2:	c1 f7       	brne	.-16     	; 0xc4 <Wait+0x2>
	_delay_ms(1);
}
  d4:	08 95       	ret

000000d6 <can_init>:
			CANSTMOB &= ~_BV(RXOK);
			CANCDMOB = _BV(CONMOB1);
			break;
		}
	}
}
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
  e8:	22 e0       	ldi	r18, 0x02	; 2
  ea:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
  ee:	24 e0       	ldi	r18, 0x04	; 4
  f0:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
  f4:	23 e1       	ldi	r18, 0x13	; 19
  f6:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
  fa:	20 e8       	ldi	r18, 0x80	; 128
  fc:	20 93 db 00 	sts	0x00DB, r18	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
 100:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 104:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 108:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
 10c:	4f ef       	ldi	r20, 0xFF	; 255
 10e:	5f ef       	ldi	r21, 0xFF	; 255
 110:	ba 01       	movw	r22, r20
 112:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__DATA_REGION_ORIGIN__+0x94>
 116:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <__DATA_REGION_ORIGIN__+0x95>
 11a:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
 11e:	70 93 f7 00 	sts	0x00F7, r23	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
 122:	28 2f       	mov	r18, r24
 124:	22 95       	swap	r18
 126:	22 0f       	add	r18, r18
 128:	20 7e       	andi	r18, 0xE0	; 224
 12a:	96 95       	lsr	r25
 12c:	87 95       	ror	r24
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	a0 e0       	ldi	r26, 0x00	; 0
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	b8 2f       	mov	r27, r24
 13e:	aa 27       	eor	r26, r26
 140:	99 27       	eor	r25, r25
 142:	88 27       	eor	r24, r24
 144:	a2 2b       	or	r26, r18
 146:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 14a:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 14e:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 152:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0d ee       	ldi	r16, 0xED	; 237
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	2e ee       	ldi	r18, 0xEE	; 238
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	cf ee       	ldi	r28, 0xEF	; 239
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	a4 ef       	ldi	r26, 0xF4	; 244
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	0f 2e       	mov	r0, r31
 16a:	f0 ef       	ldi	r31, 0xF0	; 240
 16c:	ef 2e       	mov	r14, r31
 16e:	f1 2c       	mov	r15, r1
 170:	f0 2d       	mov	r31, r0
 172:	98 2f       	mov	r25, r24
 174:	92 95       	swap	r25
 176:	90 7f       	andi	r25, 0xF0	; 240
 178:	f8 01       	movw	r30, r16
 17a:	90 83       	st	Z, r25
 17c:	f9 01       	movw	r30, r18
 17e:	10 82       	st	Z, r1
 180:	18 82       	st	Y, r1
 182:	4d 93       	st	X+, r20
 184:	5d 93       	st	X+, r21
 186:	6d 93       	st	X+, r22
 188:	7c 93       	st	X, r23
 18a:	13 97       	sbiw	r26, 0x03	; 3
 18c:	f7 01       	movw	r30, r14
 18e:	10 82       	st	Z, r1
 190:	11 82       	std	Z+1, r1	; 0x01
 192:	12 82       	std	Z+2, r1	; 0x02
 194:	13 82       	std	Z+3, r1	; 0x03
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	8e 30       	cpi	r24, 0x0E	; 14
 19a:	59 f7       	brne	.-42     	; 0x172 <can_init+0x9c>
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	08 95       	ret

000001b0 <can_transmit>:

void can_transmit(uint8_t *dat, uint8_t len) {

	// Select MOb0
	CANPAGE = 0x00;
 1b0:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 1b4:	66 23       	and	r22, r22
 1b6:	79 f0       	breq	.+30     	; 0x1d6 <can_transmit+0x26>
 1b8:	fc 01       	movw	r30, r24
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	26 0f       	add	r18, r22
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	2f 5f       	subi	r18, 0xFF	; 255
 1c2:	3f 4f       	sbci	r19, 0xFF	; 255
 1c4:	28 0f       	add	r18, r24
 1c6:	39 1f       	adc	r19, r25
		CANMSG = *(dat+dat_i);
 1c8:	aa ef       	ldi	r26, 0xFA	; 250
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	91 91       	ld	r25, Z+
 1ce:	9c 93       	st	X, r25
	// Select MOb0
	CANPAGE = 0x00;

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 1d0:	e2 17       	cp	r30, r18
 1d2:	f3 07       	cpc	r31, r19
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <can_transmit+0x1c>
		CANMSG = *(dat+dat_i);
	}

	// Set message length and start transmission
	CANCDMOB = (CANCDMOB & _BV(IDE)) | _BV(CONMOB0) | (len & 0x0F);
 1d6:	ef ee       	ldi	r30, 0xEF	; 239
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 71       	andi	r24, 0x10	; 16
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	6f 70       	andi	r22, 0x0F	; 15
 1e2:	68 2b       	or	r22, r24
 1e4:	60 83       	st	Z, r22
 1e6:	08 95       	ret

000001e8 <Input_reading>:
#include "ADC.h"
#include "InputCapture.h"
#include "CAN.h"

void Input_reading(unsigned int *t)
{
 1e8:	fc 01       	movw	r30, r24
	TCCR1A = 0;
 1ea:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TIFR1 = (1<<ICF1);							// clear input capture flag
 1ee:	80 e2       	ldi	r24, 0x20	; 32
 1f0:	86 bb       	out	0x16, r24	; 22
	TCCR1B = 0x45;								// capture on rising edge
 1f2:	85 e4       	ldi	r24, 0x45	; 69
 1f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	while ((TIFR1&(1<<ICF1)) == 0);				// monitor for capture
 1f8:	b5 9b       	sbis	0x16, 5	; 22
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <Input_reading+0x10>
	 	
	*t = ICR1;
 1fc:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 200:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 204:	91 83       	std	Z+1, r25	; 0x01
 206:	80 83       	st	Z, r24
	TIFR1 = (1<<ICF1);							// clear capture flag
 208:	80 e2       	ldi	r24, 0x20	; 32
 20a:	86 bb       	out	0x16, r24	; 22
	 	
	while ((TIFR1 &(1<<ICF1)) == 0);			// monitor for next rising edge capture
 20c:	b5 9b       	sbis	0x16, 5	; 22
 20e:	fe cf       	rjmp	.-4      	; 0x20c <Input_reading+0x24>
	 	
	*t = ICR1 - *t; 							// period= recent capture-previous capture
 210:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 214:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 218:	20 81       	ld	r18, Z
 21a:	31 81       	ldd	r19, Z+1	; 0x01
 21c:	82 1b       	sub	r24, r18
 21e:	93 0b       	sbc	r25, r19
 220:	91 83       	std	Z+1, r25	; 0x01
 222:	80 83       	st	Z, r24
 224:	08 95       	ret

00000226 <main>:
#define ADC_ACTIVE												// Define what functions will be active ADC and/or input capture by commenting out the one you are not using
#define Input_Capture										


int main(void)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	00 d0       	rcall	.+0      	; 0x22c <main+0x6>
 22c:	00 d0       	rcall	.+0      	; 0x22e <main+0x8>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
	can_init(0);							// Intialize CAN protocol	
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 6b 00 	call	0xd6	; 0xd6 <can_init>
	unsigned int t;
	
	DDRB = 0b00000100 ;						// Define register pins input and output
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00110000 ;
 23e:	80 e3       	ldi	r24, 0x30	; 48
 240:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10000000 ;
 242:	80 e8       	ldi	r24, 0x80	; 128
 244:	8a b9       	out	0x0a, r24	; 10
	
	uint8_t dat[2] = {0xAA};				// Define
 246:	1c 82       	std	Y+4, r1	; 0x04
 248:	1b 82       	std	Y+3, r1	; 0x03
 24a:	8a ea       	ldi	r24, 0xAA	; 170
 24c:	8b 83       	std	Y+3, r24	; 0x03
	
	PCMSK0 |= (1<<PCINT0) | (1<<PCINT3);
 24e:	ea e6       	ldi	r30, 0x6A	; 106
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	89 60       	ori	r24, 0x09	; 9
 256:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);
 258:	e8 e6       	ldi	r30, 0x68	; 104
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
	sei();
 262:	78 94       	sei
    while (1) 
    {
////////////////////////////////////////////////////////////////////////////////
		#ifdef ADC_ACTIVE
			ADC_reading();
			dat[0] = ADCH;
 264:	09 e7       	ldi	r16, 0x79	; 121
 266:	10 e0       	ldi	r17, 0x00	; 0
	
    while (1) 
    {
////////////////////////////////////////////////////////////////////////////////
		#ifdef ADC_ACTIVE
			ADC_reading();
 268:	0e 94 4a 00 	call	0x94	; 0x94 <ADC_reading>
			dat[0] = ADCH;
 26c:	f8 01       	movw	r30, r16
 26e:	80 81       	ld	r24, Z
 270:	8b 83       	std	Y+3, r24	; 0x03
		#endif	
///////////////////////////////////////////////////////////////////////////////
		#ifdef Input_Capture
			Input_reading(&t);
 272:	ce 01       	movw	r24, r28
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Input_reading>
			#ifdef ADC_ACTIVE
				dat[1] = t;
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	8c 83       	std	Y+4, r24	; 0x04
			#else
				dat[0] = t;
			#endif
		#endif 
////////////////////////////////////////////////////////////////////////////////
		Wait();
 27e:	0e 94 61 00 	call	0xc2	; 0xc2 <Wait>
		can_transmit(dat, 1);	
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	ce 01       	movw	r24, r28
 286:	03 96       	adiw	r24, 0x03	; 3
 288:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <can_transmit>
 28c:	ed cf       	rjmp	.-38     	; 0x268 <main+0x42>

0000028e <__vector_22>:
    }
	return 0;
}

ISR(PCINT0_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1

}
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <__vector_25>:

ISR(PCINT3_vect)
{
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
	// Your code here
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
