
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b9e  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ab6  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055c  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 92 00 	call	0x124	; 0x124 <main>
  8c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <Lees>:



void Lees()
{
   ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
  94:	ea e7       	ldi	r30, 0x7A	; 122
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	87 60       	ori	r24, 0x07	; 7
  9c:	80 83       	st	Z, r24

   ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
  9e:	ac e7       	ldi	r26, 0x7C	; 124
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	8c 91       	ld	r24, X
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	8c 93       	st	X, r24
   ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
  a8:	8c 91       	ld	r24, X
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8c 93       	st	X, r24

   ADMUX |= (1<<MUX2) | (1<<MUX1) ;//  MUX values needed to be changed to use ADC5
  ae:	8c 91       	ld	r24, X
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	8c 93       	st	X, r24

   //ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode

   ADCSRA |= (1 << ADEN);  // Enable ADC
  b4:	80 81       	ld	r24, Z
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	80 83       	st	Z, r24
   ADCSRA |= (1 << ADSC);  // Start A2D Conversions
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
		
		
	if (ADCH < 64)
  c0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  c4:	80 34       	cpi	r24, 0x40	; 64
  c6:	28 f4       	brcc	.+10     	; 0xd2 <Lees+0x3e>
	{
		PORTD |= (1<<PORTD7);
  c8:	5f 9a       	sbi	0x0b, 7	; 11
		PORTB &= ~(1<<PORTB2);
  ca:	2a 98       	cbi	0x05, 2	; 5
		PORTC &= ~(1<<PORTC4);
  cc:	44 98       	cbi	0x08, 4	; 8
		PORTC &= ~(1<<PORTC5);
  ce:	45 98       	cbi	0x08, 5	; 8
  d0:	08 95       	ret
	}

	else if(( ADCH < 128) && (ADCH >= 64))
  d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  d6:	88 23       	and	r24, r24
  d8:	4c f0       	brlt	.+18     	; 0xec <Lees+0x58>
  da:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  de:	80 34       	cpi	r24, 0x40	; 64
  e0:	28 f0       	brcs	.+10     	; 0xec <Lees+0x58>
	{
		PORTD |= (1<<PORTD7);
  e2:	5f 9a       	sbi	0x0b, 7	; 11
		PORTB |= (1<<PORTB2);
  e4:	2a 9a       	sbi	0x05, 2	; 5
		PORTC &= ~(1<<PORTC4);
  e6:	44 98       	cbi	0x08, 4	; 8
		PORTC &= ~(1<<PORTC5);
  e8:	45 98       	cbi	0x08, 5	; 8
  ea:	08 95       	ret
	}	
	
	else if(( ADCH < 192) &&( ADCH >= 128))
  ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  f0:	80 3c       	cpi	r24, 0xC0	; 192
  f2:	48 f4       	brcc	.+18     	; 0x106 <Lees+0x72>
  f4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  f8:	88 23       	and	r24, r24
  fa:	2c f4       	brge	.+10     	; 0x106 <Lees+0x72>
	{
		PORTD |= (1<<PORTD7);
  fc:	5f 9a       	sbi	0x0b, 7	; 11
		PORTB |= (1<<PORTB2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
		PORTC |= (1<<PORTC4);
 100:	44 9a       	sbi	0x08, 4	; 8
		PORTC &= ~(1<<PORTC5);
 102:	45 98       	cbi	0x08, 5	; 8
 104:	08 95       	ret
	}	
	
	else
	{
		PORTD |= (1<<PORTD7);
 106:	5f 9a       	sbi	0x0b, 7	; 11
		PORTB |= (1<<PORTB2);
 108:	2a 9a       	sbi	0x05, 2	; 5
		PORTC |= (1<<PORTC4);
 10a:	44 9a       	sbi	0x08, 4	; 8
		PORTC |= (1<<PORTC5);
 10c:	45 9a       	sbi	0x08, 5	; 8
 10e:	08 95       	ret

00000110 <Wait>:
	}
}


void Wait()
{
 110:	84 e1       	ldi	r24, 0x14	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	e3 ec       	ldi	r30, 0xC3	; 195
 114:	f9 e0       	ldi	r31, 0x09	; 9
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <Wait+0x6>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <Wait+0xc>
 11c:	00 00       	nop
 11e:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;
	for(i=0;i<20;i++)
 120:	c1 f7       	brne	.-16     	; 0x112 <Wait+0x2>
	_delay_ms(10);
}
 122:	08 95       	ret

00000124 <main>:

int main(void) {
	DDRD = 0b10000000 ;										// define register pins input and output
 124:	80 e8       	ldi	r24, 0x80	; 128
 126:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00110000 ;
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	87 b9       	out	0x07, r24	; 7
	DDRB = 0b00000100 ;
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	84 b9       	out	0x04, r24	; 4
	
	
	while (1) 
	{
		Lees();	
 130:	0e 94 4a 00 	call	0x94	; 0x94 <Lees>
		Wait();
 134:	0e 94 88 00 	call	0x110	; 0x110 <Wait>
 138:	fb cf       	rjmp	.-10     	; 0x130 <main+0xc>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
