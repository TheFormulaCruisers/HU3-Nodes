
CAN_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d93  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b86  00000000  00000000  000010c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cd  00000000  00000000  00001c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  0000211c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059b  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000394  00000000  00000000  0000277f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002b13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <can_init>:
			CANSTMOB &= ~_BV(RXOK);
			CANCDMOB = _BV(CONMOB1);
			break;
		}
	}
}
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
  a6:	22 e0       	ldi	r18, 0x02	; 2
  a8:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
  ac:	24 e0       	ldi	r18, 0x04	; 4
  ae:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
  b2:	23 e1       	ldi	r18, 0x13	; 19
  b4:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
  b8:	20 e8       	ldi	r18, 0x80	; 128
  ba:	20 93 db 00 	sts	0x00DB, r18	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
  be:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
  c2:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  c6:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
  ca:	4f ef       	ldi	r20, 0xFF	; 255
  cc:	5f ef       	ldi	r21, 0xFF	; 255
  ce:	ba 01       	movw	r22, r20
  d0:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__DATA_REGION_ORIGIN__+0x94>
  d4:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <__DATA_REGION_ORIGIN__+0x95>
  d8:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
  dc:	70 93 f7 00 	sts	0x00F7, r23	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
  e0:	28 2f       	mov	r18, r24
  e2:	22 95       	swap	r18
  e4:	22 0f       	add	r18, r18
  e6:	20 7e       	andi	r18, 0xE0	; 224
  e8:	96 95       	lsr	r25
  ea:	87 95       	ror	r24
  ec:	96 95       	lsr	r25
  ee:	87 95       	ror	r24
  f0:	96 95       	lsr	r25
  f2:	87 95       	ror	r24
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	b8 2f       	mov	r27, r24
  fc:	aa 27       	eor	r26, r26
  fe:	99 27       	eor	r25, r25
 100:	88 27       	eor	r24, r24
 102:	a2 2b       	or	r26, r18
 104:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 108:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 10c:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 110:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0d ee       	ldi	r16, 0xED	; 237
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	2e ee       	ldi	r18, 0xEE	; 238
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	cf ee       	ldi	r28, 0xEF	; 239
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	a4 ef       	ldi	r26, 0xF4	; 244
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	0f 2e       	mov	r0, r31
 128:	f0 ef       	ldi	r31, 0xF0	; 240
 12a:	ef 2e       	mov	r14, r31
 12c:	f1 2c       	mov	r15, r1
 12e:	f0 2d       	mov	r31, r0
 130:	98 2f       	mov	r25, r24
 132:	92 95       	swap	r25
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	f8 01       	movw	r30, r16
 138:	90 83       	st	Z, r25
 13a:	f9 01       	movw	r30, r18
 13c:	10 82       	st	Z, r1
 13e:	18 82       	st	Y, r1
 140:	4d 93       	st	X+, r20
 142:	5d 93       	st	X+, r21
 144:	6d 93       	st	X+, r22
 146:	7c 93       	st	X, r23
 148:	13 97       	sbiw	r26, 0x03	; 3
 14a:	f7 01       	movw	r30, r14
 14c:	10 82       	st	Z, r1
 14e:	11 82       	std	Z+1, r1	; 0x01
 150:	12 82       	std	Z+2, r1	; 0x02
 152:	13 82       	std	Z+3, r1	; 0x03
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	8e 30       	cpi	r24, 0x0E	; 14
 158:	59 f7       	brne	.-42     	; 0x130 <can_init+0x9c>
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	08 95       	ret

0000016e <can_transmit>:

void can_transmit(uint8_t *dat, uint8_t len) {

	// Select MOb0
	CANPAGE = 0x00;
 16e:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 172:	66 23       	and	r22, r22
 174:	79 f0       	breq	.+30     	; 0x194 <can_transmit+0x26>
 176:	fc 01       	movw	r30, r24
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	26 0f       	add	r18, r22
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	28 0f       	add	r18, r24
 184:	39 1f       	adc	r19, r25
		CANMSG = *(dat+dat_i);
 186:	aa ef       	ldi	r26, 0xFA	; 250
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	91 91       	ld	r25, Z+
 18c:	9c 93       	st	X, r25
	// Select MOb0
	CANPAGE = 0x00;

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 18e:	e2 17       	cp	r30, r18
 190:	f3 07       	cpc	r31, r19
 192:	d9 f7       	brne	.-10     	; 0x18a <can_transmit+0x1c>
		CANMSG = *(dat+dat_i);
	}

	// Set message length and start transmission
	CANCDMOB = (CANCDMOB & _BV(IDE)) | _BV(CONMOB0) | (len & 0x0F);
 194:	ef ee       	ldi	r30, 0xEF	; 239
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	80 71       	andi	r24, 0x10	; 16
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	6f 70       	andi	r22, 0x0F	; 15
 1a0:	68 2b       	or	r22, r24
 1a2:	60 83       	st	Z, r22
 1a4:	08 95       	ret

000001a6 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

#include "can.h"

int main(void) {
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	28 97       	sbiw	r28, 0x08	; 8
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
	
	can_init(0);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 4a 00 	call	0x94	; 0x94 <can_init>
	sei();
 1c2:	78 94       	sei

	uint8_t dat[8] = {0xAA};
 1c4:	fe 01       	movw	r30, r28
 1c6:	31 96       	adiw	r30, 0x01	; 1
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	df 01       	movw	r26, r30
 1cc:	1d 92       	st	X+, r1
 1ce:	8a 95       	dec	r24
 1d0:	e9 f7       	brne	.-6      	; 0x1cc <main+0x26>
	const uint32_t duration = 1000000;
	uint32_t ledi;
	uint8_t leds = 0x01;
	uint8_t dir = 0;
	DDRC = 0xFF;
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	87 b9       	out	0x07, r24	; 7

	uint8_t dat[8] = {0xAA};
	const uint32_t duration = 1000000;
	uint32_t ledi;
	uint8_t leds = 0x01;
	uint8_t dir = 0;
 1d6:	00 e0       	ldi	r16, 0x00	; 0
	sei();

	uint8_t dat[8] = {0xAA};
	const uint32_t duration = 1000000;
	uint32_t ledi;
	uint8_t leds = 0x01;
 1d8:	11 e0       	ldi	r17, 0x01	; 1
			dir = 0;
		}
		if (dir) {
			leds >>= 1;
			} else {
			leds <<= 1;
 1da:	f1 2c       	mov	r15, r1
	uint8_t dir = 0;
	DDRC = 0xFF;
	
	while (1) {
		
		dat[0] = leds;
 1dc:	19 83       	std	Y+1, r17	; 0x01
		can_transmit(dat, 1);
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	0e 94 b7 00 	call	0x16e	; 0x16e <can_transmit>
 1e8:	80 e4       	ldi	r24, 0x40	; 64
 1ea:	92 e4       	ldi	r25, 0x42	; 66
 1ec:	af e0       	ldi	r26, 0x0F	; 15
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	a1 09       	sbc	r26, r1
 1f4:	b1 09       	sbc	r27, r1
		
		for (ledi = 0; ledi < duration; ledi++);
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x4a>
		if (leds == 0x80) {
 1f8:	10 38       	cpi	r17, 0x80	; 128
 1fa:	29 f0       	breq	.+10     	; 0x206 <main+0x60>
			dir = 1;
			} else if (leds == 0x01) {
 1fc:	11 30       	cpi	r17, 0x01	; 1
 1fe:	31 f0       	breq	.+12     	; 0x20c <main+0x66>
			dir = 0;
		}
		if (dir) {
 200:	00 23       	and	r16, r16
 202:	21 f0       	breq	.+8      	; 0x20c <main+0x66>
 204:	01 c0       	rjmp	.+2      	; 0x208 <main+0x62>
		dat[0] = leds;
		can_transmit(dat, 1);
		
		for (ledi = 0; ledi < duration; ledi++);
		if (leds == 0x80) {
			dir = 1;
 206:	01 e0       	ldi	r16, 0x01	; 1
			} else if (leds == 0x01) {
			dir = 0;
		}
		if (dir) {
			leds >>= 1;
 208:	16 95       	lsr	r17
 20a:	02 c0       	rjmp	.+4      	; 0x210 <main+0x6a>
			} else {
			leds <<= 1;
 20c:	11 0f       	add	r17, r17
 20e:	0f 2d       	mov	r16, r15
		}
		PORTC = leds;
 210:	18 b9       	out	0x08, r17	; 8
	}
 212:	e4 cf       	rjmp	.-56     	; 0x1dc <main+0x36>

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
