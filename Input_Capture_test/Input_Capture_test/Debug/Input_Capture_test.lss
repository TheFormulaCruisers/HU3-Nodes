
Input_Capture_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae0  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a15  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052e  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  00001eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001ed6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:

int main ( )
{
	unsigned int t;

	DDRB = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;	
  98:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<PORTD7) ;	
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	8a b9       	out	0x0a, r24	; 10
	
	while (1)
	{
		TCCR1A = 0;
  9e:	c0 e8       	ldi	r28, 0x80	; 128
  a0:	d0 e0       	ldi	r29, 0x00	; 0
		TIFR1 = (1<<ICF1);							// clear input capture flag
  a2:	40 e2       	ldi	r20, 0x20	; 32
		TCCR1B = 0x41;								// capture on rising edge
  a4:	a1 e8       	ldi	r26, 0x81	; 129
  a6:	b0 e0       	ldi	r27, 0x00	; 0
			
		while ((TIFR1&(1<<ICF1)) == 0);				// monitor for capture
		
		t = ICR1;
  a8:	e6 e8       	ldi	r30, 0x86	; 134
  aa:	f0 e0       	ldi	r31, 0x00	; 0
	DDRD = (1<<PORTD7) ;	
	
	while (1)
	{
		TCCR1A = 0;
		TIFR1 = (1<<ICF1);							// clear input capture flag
  ac:	64 2f       	mov	r22, r20
		TCCR1B = 0x41;								// capture on rising edge
  ae:	51 e4       	ldi	r21, 0x41	; 65
	DDRC = 0xFF;	
	DDRD = (1<<PORTD7) ;	
	
	while (1)
	{
		TCCR1A = 0;
  b0:	18 82       	st	Y, r1
		TIFR1 = (1<<ICF1);							// clear input capture flag
  b2:	66 bb       	out	0x16, r22	; 22
		TCCR1B = 0x41;								// capture on rising edge
  b4:	5c 93       	st	X, r21
			
		while ((TIFR1&(1<<ICF1)) == 0);				// monitor for capture
  b6:	b5 9b       	sbis	0x16, 5	; 22
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x22>
		
		t = ICR1;
  ba:	20 81       	ld	r18, Z
  bc:	31 81       	ldd	r19, Z+1	; 0x01
		TIFR1 = (1<<ICF1);							// clear capture flag
  be:	46 bb       	out	0x16, r20	; 22
		
		while ((TIFR1 &(1<<ICF1)) == 0);			// monitor for next rising edge capture
  c0:	b5 9b       	sbis	0x16, 5	; 22
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x2c>
		
		t = ICR1 - t; 								// period= recent capture-previous capture
  c4:	80 81       	ld	r24, Z
  c6:	91 81       	ldd	r25, Z+1	; 0x01
  c8:	82 1b       	sub	r24, r18
  ca:	93 0b       	sbc	r25, r19

		
		if(t < 10000)
  cc:	80 31       	cpi	r24, 0x10	; 16
  ce:	27 e2       	ldi	r18, 0x27	; 39
  d0:	92 07       	cpc	r25, r18
  d2:	08 f4       	brcc	.+2      	; 0xd6 <main+0x42>
		{							// put period count on PORTA & PORTB
			PORTC |= (1<<PORTC5);
  d4:	45 9a       	sbi	0x08, 5	; 8
		}
		if(t < 3500)
  d6:	8c 3a       	cpi	r24, 0xAC	; 172
  d8:	2d e0       	ldi	r18, 0x0D	; 13
  da:	92 07       	cpc	r25, r18
  dc:	08 f4       	brcc	.+2      	; 0xe0 <main+0x4c>
		{							// put period count on PORTA & PORTB
			PORTC |= (1<<PORTC4);
  de:	44 9a       	sbi	0x08, 4	; 8
		}		
		
		if(t < 2000)
  e0:	80 3d       	cpi	r24, 0xD0	; 208
  e2:	27 e0       	ldi	r18, 0x07	; 7
  e4:	92 07       	cpc	r25, r18
  e6:	08 f4       	brcc	.+2      	; 0xea <main+0x56>
		{							// put period count on PORTA & PORTB
			PORTB |= (1<<PORTB2);
  e8:	2a 9a       	sbi	0x05, 2	; 5
		}		
		if(t < 1000)
  ea:	88 3e       	cpi	r24, 0xE8	; 232
  ec:	93 40       	sbci	r25, 0x03	; 3
  ee:	00 f7       	brcc	.-64     	; 0xb0 <main+0x1c>
		{							// put period count on PORTA & PORTB
			PORTD |= (1<<PORTD7);
  f0:	5f 9a       	sbi	0x0b, 7	; 11
  f2:	de cf       	rjmp	.-68     	; 0xb0 <main+0x1c>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
